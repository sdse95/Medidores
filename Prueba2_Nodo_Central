#include <SPI.h>
#include "RF24.h"
#include "RF24Network.h"
#include "RF24Mesh.h"

RF24 radio(7,8);
RF24Network network(radio);
RF24Mesh mesh(radio,network);


struct gnbIn {            // Grow Node Basic Incoming message = gnbIn
    uint32_t nid;         // nodeID of sending node - used to identify origin of message
    float temp;
    float hum;
    float hindex;
    uint16_t lux;
}

void setup() {
    Serial.begin(115200);
    mesh.setNodeID( 0);
    mesh.begin(75,RF24_250KBPS,30000);
    radio.setPALevel(RF24_PA_MAX);
    radio.PrintDetails();
    Serial.println("Master Ready");
}

void loop() {
    mesh.update();             // This needs to be called regularly to maintain the mesh network
    mesh.DHCP();               // Manage the Node addresses on the mesh

    while (network.available()) {        // When an incoming message is detected,
        RF24NetworkHeader header;        // define a new message header object
        network.peek(header);            // Have a look at the message header

        gnbIn gnbData;        // create a new gnbIn instance to hold the incoming gnbData values

        switch(header.type) {         // Switch case based on header.type

            case 1:      // Type 1 correlates to Grow Node Basic data

                // Push the payload data to the payload instance
                network.read(header,&gnbData,sizeof(gnbData));

                //Format incoming data as Serial JSON output
                Serial.print("{\"node\":");
                Serial.print(gnbData.nid);
                Serial.print(",\"temp\":");
                Serial.print(gnbData.temp);
                Serial.print(",\"hum\":");
                Serial.print(gnbData.hum);
                Serial.print(",\"hin\":");
                Serial.print(gnbData.hindex);
                Serial.print(",\"lux\":");
                Serial.print(gnbData.lux);
                Serial.println("}");
            break;

            // We can handle other payload types by following the same process
            // Since we only have one node type, we will treat any
            // other network traffic as noise

            default:
                Serial.println("Undefined Message");
            break;

        }             // End of switch case handling
    }            // End while loop
}            // End void loop
